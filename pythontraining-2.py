Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 4*'abc'
'abcabcabcabc'
>>> 'abc'+'def'
'abcdef'
>>> 
a=range(10)
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x=4
>>> x in a
True
>>> x not in a
False
>>> a= range(1000)
>>> for i in a[::3]:
	s=s+i

	

Traceback (most recent call last):
  File "<pyshell#10>", line 2, in <module>
    s=s+i
NameError: name 's' is not defined
>>> s=0;
>>> for i in a[::3]:
	s=s+i

	
>>> s
166833
>>> for i in a[::5]:
	s=s+i

	
>>> s
266333
>>> for in a:
	
SyntaxError: invalid syntax
>>> 
s=0
for i in a :
	if i%3==0 or i%5==0:
		s=s+i
		
>>> 
>>> s
0
>>> a

>>> s=0
>>> for i in a :
	if i%3==0 or i%5==0:
		s=s+i

	
>>> s
233168
>>> s=0
>>> for i in a :
	if i%3==0 or i%5==0:
		s+=i

		
>>> s
233168
>>> l=[]
>>> print "list comprehension"
list comprehension
>>> [x*x for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> [x for x in range(10) if x%3==0 0r x%5==0]
SyntaxError: invalid syntax
>>> [x for x in range(10) if x%3==0 or x%5==0]
[0, 3, 5, 6, 9]
>>> sum([x for x in range(10) if x%3==0 or x%5==0])
23
>>> sum([x for x in range(1000) if x%3==0 or x%5==0])
233168
>>> print "sets"
sets
>>> s1=set([x for x in range(1000) if(x%3==0)])
>>> s2=set([x for x in range(1000) if(x%5==0)])
>>> sum(s1.union(s2))
233168
>>> 
s='abcdefghijklmnopqrstuvwxyz'
>>> l=list(s)
>>> l.index('o')
14
>>> l
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> s.index('o')
14
>>> s
'abcdefghijklmnopqrstuvwxyz'
>>> s['14']

Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    s['14']
TypeError: string indices must be integers, not str
>>> s[14]
'o'
>>> print "dictionary"
dictionary
>>> d={'a':1,'b':2,'c':3,'d':4,'e':5}
>>> d
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
>>> d.keys()
['a', 'c', 'b', 'e', 'd']
>>> d.keys
<built-in method keys of dict object at 0x02A89C00>
>>> k=d.keys();
>>> k
['a', 'c', 'b', 'e', 'd']
>>> k.sort();
>>> k
['a', 'b', 'c', 'd', 'e']
>>> sorted
<built-in function sorted>
>>> sorted(d.keys())
['a', 'b', 'c', 'd', 'e']
>>> k
['a', 'b', 'c', 'd', 'e']
>>> sorted(k)
['a', 'b', 'c', 'd', 'e']
>>> k
['a', 'b', 'c', 'd', 'e']
>>> d.values()
[1, 3, 2, 5, 4]
>>> k=d.keys()
>>> k
['a', 'c', 'b', 'e', 'd']
>>> sorted(k)
['a', 'b', 'c', 'd', 'e']
>>> k
['a', 'c', 'b', 'e', 'd']
>>> d.values()
[1, 3, 2, 5, 4]
>>> d['c']
3
>>> d.items()
[('a', 1), ('c', 3), ('b', 2), ('e', 5), ('d', 4)]
>>> d
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
>>> for k,v in d.items:
	print k,v

	

Traceback (most recent call last):
  File "<pyshell#76>", line 1, in <module>
    for k,v in d.items:
TypeError: 'builtin_function_or_method' object is not iterable
>>> for k,v in d.items():
	print k,v

	
a 1
c 3
b 2
e 5
d 4
>>> for k in d.keys():
	print k,d[k]

	
a 1
c 3
b 2
e 5
d 4
>>> 
>>> 'b' in d
True
>>>  'h' in d
 
  File "<pyshell#84>", line 2
    'h' in d
    ^
IndentationError: unexpected indent
>>> 'h' in d
False
>>> 2 in d
False
>>> d.get('a')
1
>>> d.get('z')
>>> d.get('z',-1)
-1
>>> d.get('a',-1)
1
>>> d.get('z',"abc")
'abc'
>>> 
d.setdefault('a',-1)
1
>>> d
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
>>> d.setdefault('z',5)
5
>>> d
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'z': 5}
>>> print "memoization"
memoization
>>> d={}
>>> d['a']=1
>>> d.b=2;

Traceback (most recent call last):
  File "<pyshell#99>", line 1, in <module>
    d.b=2;
AttributeError: 'dict' object has no attribute 'b'
>>> d['b']=2
>>> d
{'a': 1, 'b': 2}
>>> s='abcdefghijklmnopqrstuvwxyz'
>>> t=range(26)
>>> zip(s,t)
[('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 4), ('f', 5), ('g', 6), ('h', 7), ('i', 8), ('j', 9), ('k', 10), ('l', 11), ('m', 12), ('n', 13), ('o', 14), ('p', 15), ('q', 16), ('r', 17), ('s', 18), ('t', 19), ('u', 20), ('v', 21), ('w', 22), ('x', 23), ('y', 24), ('z', 25)]
>>> d=dict(zip(s,t))
>>> d
{'a': 0, 'c': 2, 'b': 1, 'e': 4, 'd': 3, 'g': 6, 'f': 5, 'i': 8, 'h': 7, 'k': 10, 'j': 9, 'm': 12, 'l': 11, 'o': 14, 'n': 13, 'q': 16, 'p': 15, 's': 18, 'r': 17, 'u': 20, 't': 19, 'w': 22, 'v': 21, 'y': 24, 'x': 23, 'z': 25}
>>> zip(t,s)
[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'), (6, 'g'), (7, 'h'), (8, 'i'), (9, 'j'), (10, 'k'), (11, 'l'), (12, 'm'), (13, 'n'), (14, 'o'), (15, 'p'), (16, 'q'), (17, 'r'), (18, 's'), (19, 't'), (20, 'u'), (21, 'v'), (22, 'w'), (23, 'x'), (24, 'y'), (25, 'z')]
>>> t=range(100)
>>> zip(t,s)
[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'), (6, 'g'), (7, 'h'), (8, 'i'), (9, 'j'), (10, 'k'), (11, 'l'), (12, 'm'), (13, 'n'), (14, 'o'), (15, 'p'), (16, 'q'), (17, 'r'), (18, 's'), (19, 't'), (20, 'u'), (21, 'v'), (22, 'w'), (23, 'x'), (24, 'y'), (25, 'z')]
>>> len(s)
26
>>> a=dict(zip(s,range(len(s))))
>>> a
{'a': 0, 'c': 2, 'b': 1, 'e': 4, 'd': 3, 'g': 6, 'f': 5, 'i': 8, 'h': 7, 'k': 10, 'j': 9, 'm': 12, 'l': 11, 'o': 14, 'n': 13, 'q': 16, 'p': 15, 's': 18, 'r': 17, 'u': 20, 't': 19, 'w': 22, 'v': 21, 'y': 24, 'x': 23, 'z': 25}
>>> zip(s,t)
[('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 4), ('f', 5), ('g', 6), ('h', 7), ('i', 8), ('j', 9), ('k', 10), ('l', 11), ('m', 12), ('n', 13), ('o', 14), ('p', 15), ('q', 16), ('r', 17), ('s', 18), ('t', 19), ('u', 20), ('v', 21), ('w', 22), ('x', 23), ('y', 24), ('z', 25)]
>>> s=range(10)
>>> s.pop();
9
>>> s
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> s.push(9)

Traceback (most recent call last):
  File "<pyshell#117>", line 1, in <module>
    s.push(9)
AttributeError: 'list' object has no attribute 'push'
>>> s.append(9)
>>> s
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> s.prepend(10)

Traceback (most recent call last):
  File "<pyshell#120>", line 1, in <module>
    s.prepend(10)
AttributeError: 'list' object has no attribute 'prepend'
>>> s.pop(0)
0
>>> s
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> s.append(0)
>>> s
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
>>> 
